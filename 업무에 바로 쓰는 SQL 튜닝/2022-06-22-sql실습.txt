-------------------------------------------------------------
-- 예시 4.3.2: 메인 테이블에 계속 의존하는 SQL문 
-- 튜닝전
-- 외부의 사원 테이블로부터 조건절을 전달받아 수행해야 하는 테이블을 "의존성을 가진 서브쿼리"라고 한다.
-- 보통 실행 계획의 select_type 항목에 DEPENDENT라는 키워드가 있으면, 외부 테이블에서 조건절을 받은 뒤 처리해야 하므로 튜닝 대상으로 고려할 수 있다. 
-- -> 따라서 WHERE 절의 서브쿼리에서 외부 테이블인 사원 테이블의 사원정보를 조건절(WHERE 사원번호 = 사원.사원번호)로 받아야 할지 고민해봐야 한다.
-- -> 서브쿼리 대신 조인으로 변경해 수행할 수 없을지 고민을 해보아야 한다.
-- 필자의 경험상 서브쿼리보다는 조인으로 수행하는 편이 성능 측면에서 유리할 가능성이 높다.

SELECT 사원.사원번호, 
       사원.이름, 
       사원.성
  FROM 사원
 WHERE 사원번호 > 450000
   AND ( SELECT MAX(연봉)
           FROM 급여
          WHERE 사원번호 = 사원.사원번호
       ) > 100000;
            
EXPLAIN
SELECT 사원.사원번호, 
       사원.이름, 
       사원.성
  FROM 사원
 WHERE 사원번호 > 450000
   AND ( SELECT MAX(연봉)
           FROM 급여
          WHERE 사원번호 = 사원.사원번호
       ) > 100000;
      
SELECT COUNT(1) -- 49999
  FROM 사원 
 WHERE 사원번호 > 450000;

 SELECT COUNT(1) -- 300024
   FROM 사원; 

SHOW INDEX FROM 사원;
SHOW INDEX FROM 급여;
      
-- 튜닝후
-- 실행 계획의 rows 항목 정보는 SQL 수행을 위해 조사하는 행 수의 "예측값"이므로 단순하게 rows 수치의 많고 적음으로 튜닝 성공 여부를 판단하기는 어렵다.
SELECT 사원.사원번호, 
       사원.이름, 
       사원.성
  FROM 사원, 급여
 WHERE 사원.사원번호 = 급여.사원번호
   AND 사원.사원번호 > 450000
 GROUP BY 사원.사원번호
HAVING MAX(급여.연봉) > 100000;

EXPLAIN
SELECT 사원.사원번호, 
       사원.이름, 
       사원.성
  FROM 사원, 급여
 WHERE 사원.사원번호 > 450000
   AND 사원.사원번호 = 급여.사원번호
 GROUP BY 사원.사원번호
HAVING MAX(급여.연봉) > 100000;

EXPLAIN
SELECT 사원.사원번호, 
       사원.이름, 
       사원.성
  FROM 사원
  JOIN 급여
    ON 급여.사원번호 = 사원.사원번호
   AND 급여.사원번호 > 450000
 GROUP BY 사원.사원번호
HAVING MAX(급여.연봉) > 100000;
-------------------------------------------------------------
-- 예시 4.3.3: 불필요한 조인을 수행하는 SQL문
-- 튜닝전
-- WHERE 절에서는 값이 'A'인 상수와 직접 비교하므로 ref 항목이 const로 출력되고, 인덱스를 사용한 동등(=) 비교를 수행하므로 type 항목이 ref로 표시된다.
-- type 항목의 eq_ref는 드리븐 트리블에서 기본 키를 사므로 표시되는 유형이다.
-- FROM 절의 인라인 뷰는 사실상 옵티마이저에 의해 조인 방식이 뷰 병합으로 최적화시키게 된다.

SELECT COUNT(DISTINCT 사원.사원번호) AS 데이터건수
  FROM 사원,
       ( SELECT 사원번호
           FROM 사원출입기록 기록
          WHERE 출입문 = 'A'
       ) 기록
 WHERE 사원.사원번호 = 기록.사원번호;
 
EXPLAIN
SELECT COUNT(DISTINCT 사원.사원번호) AS 데이터건수
  FROM 사원,
       ( SELECT 사원번호
           FROM 사원출입기록 기록
          WHERE 출입문 = 'A'
       ) 기록
 WHERE 사원.사원번호 = 기록.사원번호;

DESC 사원;

-- 튜닝후
-- 사원출입기록 테이블의 데이터는 최종 결과에 사용하지 않고 단지 존재 여부만 파악하면 되므로 EXISTS 구문으로 변경한다.
-- 출입문 A에 관한 기록이 있는 사원번호에 대해서만 조인을 수행하고, 해당 데이터들을 집계하는 방식으로 튜닝한다.
-- 사원출일기록 테이블은 EXISTS 연산자로 데이터 존재 여부를 파악하기 위해 임시 테이블을 생성하는 MATERIALIZED로 표기된다.
-- EXISTS로 생성되는 임시테이블은 MATERAILZED로 표기된다.
SELECT COUNT(1) AS 데이터건수
  FROM 사원
 WHERE EXISTS (SELECT 1
           		 FROM 사원출입기록 기록
                WHERE 출입문 = 'A'
                  AND 기록.사원번호 = 사원.사원번호);
                  
EXPLAIN
SELECT COUNT(1) AS 데이터건수
  FROM 사원
 WHERE EXISTS (SELECT 1
           		 FROM 사원출입기록 기록
                WHERE 출입문 = 'A'
                  AND 기록.사원번호 = 사원.사원번호);
  
-------------------------------------------------------------
-- 예시 5.1.1: 처음부터 모든 데이터를 가져오는 SQL문
-- 튜닝전
-- <derived2> 테이블은 id가 2이고 select_type 항목이 DERIVED로 작성된 세 번째 행의 인라인 뷰를 가리킨다.
-- SELECT문이 조건절 없이 그루핑을 수행할 경우, 지나치게 많은 데이터에 접근하지는 않는지 의심해 볼 수 있다. 실제 EXPLAINT의 rows 항목 수치가 전체 테이블 데이터 건수와 유사할 수록, 모든 데이터에 접근하리라 예측할 수 있다.

SELECT 사원.사원번호,
       급여.평균연봉,
       급여.최고연봉,
       급여.최저연봉
  FROM 사원,
       ( SELECT 사원번호,
                ROUND(AVG(연봉),0) 평균연봉,
                ROUND(MAX(연봉),0) 최고연봉,
                ROUND(MIN(연봉),0) 최저연봉
           FROM 급여
          GROUP BY 사원번호
       ) 급여
 WHERE 사원.사원번호 = 급여.사원번호
   AND 사원.사원번호 BETWEEN 10001 AND 10100;
  
EXPLAIN
SELECT 사원.사원번호,
       급여.평균연봉,
       급여.최고연봉,
       급여.최저연봉
  FROM 사원,
       ( SELECT 사원번호,
                ROUND(AVG(연봉),0) 평균연봉,
                ROUND(MAX(연봉),0) 최고연봉,
                ROUND(MIN(연봉),0) 최저연봉
           FROM 급여
          GROUP BY 사원번호
       ) 급여
 WHERE 사원.사원번호 = 급여.사원번호
   AND 사원.사원번호 BETWEEN 10001 AND 10100;

SELECT COUNT(1) FROM 사원;

SELECT COUNT(1) FROM 사원 WHERE 사원번호 BETWEEN 10001 AND 10100;
  
-- 튜닝후
-- 전체 사원 데이터가 아닌 필요한 사원정보에만 접근해서, 급여 테이블 정보와 조인시켜 평균, 최고, 최저 연봉값을 구한다.
-- 같은 테이블에 3번이나 접근하므로, 비효율적인 방식이 아닐지 의심할 수 있겠으나, WHERE 절에 추출하려는 데이터가 전체 데이터 대비 극히 소량이라서, 인덱스를 활용해서 수행하는 3번의 스칼라 서브쿼리는 많은 리소르를 소모하지 않는다.
-- 사원번호 조건을 SELECT 절의 3개 스칼라 서브쿼리에서 매번 받으므로 select_type 항목은 DEPENDENT SUBQUERY라고 출력된다.
-- -> DEPENDENT SUBQUERY는 호출을 반복해 일으키므로 지나치게 반복 호출될 경우 지양해야할 유형이다.
-- -> 하지만 예제와 같이 100건의 데이터가 추출되는 사원 테이블의 기준으로는 3개의 스칼라 서브쿼리를 갖는 급여 테이블에 100번만 접근하므로 성능측면에선 크게 비효율적이진 않다.

SELECT 사원.사원번호,
       ( SELECT ROUND(AVG(연봉),0)
           FROM 급여 AS 급여1
          WHERE 사원번호 = 사원.사원번호
       ) AS 평균연봉,
       ( SELECT ROUND(MAX(연봉),0)
           FROM 급여 AS 급여2
          WHERE 사원번호 = 사원.사원번호
       ) AS 최고연봉,
       ( SELECT ROUND(MIN(연봉),0)
           FROM 급여 AS 급여3
          WHERE 사원번호 = 사원.사원번호
       ) AS 최저연봉
  FROM 사원
 WHERE 사원.사원번호 BETWEEN 10001 AND 10100;

EXPLAIN
SELECT 사원.사원번호,
       ( SELECT ROUND(AVG(연봉),0)
           FROM 급여 AS 급여1
          WHERE 사원번호 = 사원.사원번호
       ) AS 평균연봉,
       ( SELECT ROUND(MAX(연봉),0)
           FROM 급여 AS 급여2
          WHERE 사원번호 = 사원.사원번호
       ) AS 최고연봉,
       ( SELECT ROUND(MIN(연봉),0)
           FROM 급여 AS 급여3
          WHERE 사원번호 = 사원.사원번호
       ) AS 최저연봉
  FROM 사원
 WHERE 사원.사원번호 BETWEEN 10001 AND 10100;
-------------------------------------------------------------